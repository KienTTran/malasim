Checks: >
  -*,
  bugprone-*,             # Enable bug-prone checks
  cppcoreguidelines-*,    # Enable C++ Core Guidelines checks
  modernize-*,            # Enable modernization checks
  readability-*,          # Enable readability checks
  performance-*           # Enable performance checks
# Optionally, disable specific checks that are not relevant
# For example, if you don't use certain C++ features or have specific project constraints
# -*.fuchsia-*
# -*.llvmlibc-*
# -*.llvm-*

WarningsAsErrors: "*"

CheckOptions:
  # Identifier Length
  - key: readability-identifier-length.MinimumVariableNameLength
    value: "2"
  - key: readability-identifier-length.MinimumParameterNameLength
    value: "2"
  - key: readability-identifier-length.MinimumLoopCounterNameLength
    value: "2"

  # Naming Conventions
  # Namespaces
  - { key: readability-identifier-naming.NamespaceCase, value: snake_case }

  # Macros
  - {
      key: readability-identifier-naming.MacroDefinitionCase,
      value: UPPER_CASE,
    }

  # Types
  - { key: readability-identifier-naming.ClassCase, value: CamelCase }
  - { key: readability-identifier-naming.StructCase, value: CamelCase }
  - { key: readability-identifier-naming.EnumCase, value: CamelCase }
  - { key: readability-identifier-naming.EnumConstantCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.TypedefCase, value: CamelCase }
  - { key: readability-identifier-naming.TypeAliasCase, value: CamelCase }
  - { key: readability-identifier-naming.UnionCase, value: CamelCase }

  # Functions
  - { key: readability-identifier-naming.FunctionCase, value: snake_case }
  - { key: readability-identifier-naming.GlobalFunctionCase, value: snake_case }

  # Variables
  - { key: readability-identifier-naming.GlobalVariableCase, value: snake_case }
  - { key: readability-identifier-naming.LocalVariableCase, value: snake_case }
  - { key: readability-identifier-naming.ParameterCase, value: snake_case }

  # Class Members and Methods
  - { key: readability-identifier-naming.ClassMemberCase, value: snake_case_ }
  - { key: readability-identifier-naming.ClassMethodCase, value: snake_case }

  # General Methods
  - { key: readability-identifier-naming.MethodCase, value: snake_case }
  - { key: readability-identifier-naming.PrivateMethodCase, value: snake_case }

  # Members
  - { key: readability-identifier-naming.MemberCase, value: snake_case_ }
  - { key: readability-identifier-naming.PrivateMemberCase, value: snake_case_ }
  - { key: readability-identifier-naming.PrivateMemberSuffix, value: "_" }

  # Variables
  - { key: readability-identifier-naming.VariableCase, value: snake_case }
  - { key: readability-identifier-naming.StaticVariableCase, value: snake_case }
  - {
      key: readability-identifier-naming.ConstexprVariableCase,
      value: UPPER_CASE,
    }

  # Constants
  - { key: readability-identifier-naming.GlobalConstantCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.MemberConstantCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.StaticConstantCase, value: UPPER_CASE }

  # Template Parameters
  - {
      key: readability-identifier-naming.TemplateParameterCase,
      value: CamelCase,
    }

  # Magic Numbers
  - {
      key: readability-magic-numbers.IgnoredIntegerValues,
      value: "-1;0;1;2;3;4;5;10;100",
}
